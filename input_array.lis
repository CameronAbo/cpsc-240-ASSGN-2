     1                                  ;******************************************************************************************************************
     2                                  ;Copyright (C) 2020 Floyd Holliday                                                                                *
     3                                  ;                                                                                                                 *
     4                                  ;This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public*
     5                                  ;License version 3 as published by the Free Software Foundation.  This program is distributed in the hope that it *
     6                                  ;will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A  *
     7                                  ;PARTICULAR PURPOSE.  See the GNU General Public License for more details.  A copy of the GNU General Public      *
     8                                  ;License v3 is available here:  <https://www.gnu.org/licenses/>.                                                  *
     9                                  ;******************************************************************************************************************
    10                                  
    11                                  
    12                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2
    13                                  ;
    14                                  ;Author information
    15                                  ;  Author name: Cameron Abo
    16                                  ;  Author email: cabo0@csu.fullerton.edu
    17                                  ;
    18                                  ;Program information
    19                                  ;  Program name: gpr_backup.inc
    20                                  ;  Programming environment: Visual Studio Code, gcc 9.4.0, nasm
    21                                  ;  Programming languages:  X86
    22                                  ;  Date program began:     2025-Sep-21
    23                                  ;  Date program completed: 2025-Sep-21
    24                                  ;  Date comments upgraded: 2025-Sep-21
    25                                  ;  Files in this program: director.c, supervisor.asm, output_array.asm, input_array.c, director.c 
    26                                  ;  Status: Complete.  Alpha testing is finished.  Extreme cases were tested and errors resolved.
    27                                  ;
    28                                  ;References for this program
    29                                  ;  X86-64 Assembly Language Programming with Ubuntu
    30                                  ;
    31                                  ;Purpose (academic)
    32                                  ;  Backup and restore all general purpose registers and rflags.
    33                                  ;
    34                                  ;This file
    35                                  ;   File name: gpr_backup.inc
    36                                  ;   Language: i-series microprocessor assembly
    37                                  ;   Syntax: Intel
    38                                  ;   Max page width: 116 columns
    39                                  ;   Assemble: nasm -f elf64 -o super.o supervisor.asm -l super.lis
    40                                  ;   Link: gcc -m64 -no-pie -o arr.out -std=c17 director.o super.o input.o output.o 
    41                                  ;   Reference regarding -no-pie: Jorgensen, page 226.
    42                                  ;   Prototype of this function:  double manage_arrays();
    43                                  ;
    44                                  ;=======1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2
    45                                  ;
    46                                  ;
    47                                  ;
    48                                  ;
    49                                  ;===== Begin code area ================================================================================================
    50                                  
    51                                  ;Declarations
    52                                  %include "gpr_backup.inc"      ;<==This file contains macros that back up and restore the general purpose registers.
     1                              <1> ;******************************************************************************************************************
     2                              <1> ;Copyright (C) 2020 Floyd Holliday                                                                                *
     3                              <1> ;                                                                                                                 *
     4                              <1> ;This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public*
     5                              <1> ;License version 3 as published by the Free Software Foundation.  This program is distributed in the hope that it *
     6                              <1> ;will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A  *
     7                              <1> ;PARTICULAR PURPOSE.  See the GNU General Public License for more details.  A copy of the GNU General Public      *
     8                              <1> ;License v3 is available here:  <https://www.gnu.org/licenses/>.                                                  *
     9                              <1> ;******************************************************************************************************************
    10                              <1> 
    11                              <1> 
    12                              <1> ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2
    13                              <1> ;
    14                              <1> ;Author information
    15                              <1> ;  Author name: Cameron Abo
    16                              <1> ;  Author email: cabo0@csu.fullerton.edu
    17                              <1> ;
    18                              <1> ;Program information
    19                              <1> ;  Program name: gpr_backup.inc
    20                              <1> ;  Programming environment: Visual Studio Code, gcc 9.4.0, nasm
    21                              <1> ;  Programming languages:  X86
    22                              <1> ;  Date program began:     2025-Sep-21
    23                              <1> ;  Date program completed: 2025-Sep-21
    24                              <1> ;  Date comments upgraded: 2025-Sep-21
    25                              <1> ;  Files in this program: director.c, supervisor.asm, output_array.asm, input_array.c, director.c 
    26                              <1> ;  Status: Complete.  Alpha testing is finished.  Extreme cases were tested and errors resolved.
    27                              <1> ;
    28                              <1> ;References for this program
    29                              <1> ;  X86-64 Assembly Language Programming with Ubuntu
    30                              <1> ;
    31                              <1> ;Purpose (academic)
    32                              <1> ;  Backup and restore all general purpose registers and rflags.
    33                              <1> ;
    34                              <1> ;This file
    35                              <1> ;   File name: gpr_backup.inc
    36                              <1> ;   Language: i-series microprocessor assembly
    37                              <1> ;   Syntax: Intel
    38                              <1> ;   Max page width: 116 columns
    39                              <1> ;   Assemble: nasm -f elf64 -o super.o supervisor.asm -l super.lis
    40                              <1> ;   Link: gcc -m64 -no-pie -o arr.out -std=c17 director.o super.o input.o output.o 
    41                              <1> ;   Reference regarding -no-pie: Jorgensen, page 226.
    42                              <1> ;   Prototype of this function:  double manage_arrays();
    43                              <1> ;
    44                              <1> ;=======1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2
    45                              <1> ;
    46                              <1> ;
    47                              <1> ;
    48                              <1> ;
    49                              <1> ;===== Begin code area ================================================================================================
    50                              <1> 
    51                              <1> 
    52                              <1> %macro backup 0
    53                              <1>     push rbp                                          ;Backup rbp
    54                              <1>     mov  rbp,rsp                                      ;The base pointer now points to top of stack
    55                              <1>     push rdi                                          ;Backup rdi
    56                              <1>     push rsi                                          ;Backup rsi
    57                              <1>     push rdx                                          ;Backup rdx
    58                              <1>     push rcx                                          ;Backup rcx
    59                              <1>     push r8                                           ;Backup r8
    60                              <1>     push r9                                           ;Backup r9
    61                              <1>     push r10                                          ;Backup r10
    62                              <1>     push r11                                          ;Backup r11
    63                              <1>     push r12                                          ;Backup r12
    64                              <1>     push r13                                          ;Backup r13
    65                              <1>     push r14                                          ;Backup r14
    66                              <1>     push r15                                          ;Backup r15
    67                              <1>     push rbx                                          ;Backup rbx
    68                              <1>     pushf                                             ;Backup rflags
    69                              <1> %endmacro
    70                              <1> %macro restore 0
    71                              <1>     popf                                    ;Restore rflags
    72                              <1>     pop rbx                                 ;Restore rbx
    73                              <1>     pop r15                                 ;Restore r15
    74                              <1>     pop r14                                 ;Restore r14
    75                              <1>     pop r13                                 ;Restore r13
    76                              <1>     pop r12                                 ;Restore r12
    77                              <1>     pop r11                                 ;Restore r11
    78                              <1>     pop r10                                 ;Restore r10
    79                              <1>     pop r9                                  ;Restore r9
    80                              <1>     pop r8                                  ;Restore r8
    81                              <1>     pop rcx                                 ;Restore rcx
    82                              <1>     pop rdx                                 ;Restore rdx
    83                              <1>     pop rsi                                 ;Restore rsi
    84                              <1>     pop rdi                                 ;Restore rdi
    85                              <1>     pop rbp                                 ;Restore rbp
    86                              <1> %endmacro
    87                              <1> ;End of File
    53                                  newline equ 10
    54                                  null equ 0
    55                                  
    56                                  extern is_float
    57                                  
    58                                  global fill_array
    59                                  
    60                                  segment .data
    61                                  ; empty
    62                                  
    63                                  segment .bss
    64                                  ; empty
    65                                  
    66                                  segment .text
    67                                  fill_array:
    68                                  	backup              ; This macro backs up all general purpose registers.
    53 00000000 55                  <1>  push rbp
    54 00000001 4889E5              <1>  mov rbp,rsp
    55 00000004 57                  <1>  push rdi
    56 00000005 56                  <1>  push rsi
    57 00000006 52                  <1>  push rdx
    58 00000007 51                  <1>  push rcx
    59 00000008 4150                <1>  push r8
    60 0000000A 4151                <1>  push r9
    61 0000000C 4152                <1>  push r10
    62 0000000E 4153                <1>  push r11
    63 00000010 4154                <1>  push r12
    64 00000012 4155                <1>  push r13
    65 00000014 4156                <1>  push r14
    66 00000016 4157                <1>  push r15
    67 00000018 53                  <1>  push rbx
    68 00000019 9C                  <1>  pushf
    69 0000001A 4989FE                  	mov r14, rdi        ; r14 = base address of array (from caller)
    70 0000001D 4989F7                  	mov r15, rsi        ; r15 = capacity (number of cells)
    71                                  
    72 00000020 4D31ED                  	xor r13, r13        ; r13 = index / count = 0
    73                                  
    74                                  fill_loop:
    75 00000023 4D39FD                  	cmp r13, r15        ; check of index < array size = 15
    76 00000026 7D1B                    	jge fill_done
    77                                  
    78                                  	; Call is_float: returns status in rax (0 = ctrl-d/EOF, 1 = valid) and double in xmm0
    79 00000028 BF00000000              	mov rdi, 0          
    80 0000002D E8(00000000)            	call is_float
    81 00000032 4883F800                	cmp rax, 0          ; 0 if ctrl-d is input
    82 00000036 740B                    	je fill_done        ; ctrl-d: stop filling array
    83                                  
    84                                  	; Store the returned double (xmm0) into array[r13]
    85 00000038 F2430F1104EE            	movsd [r14 + r13*8], xmm0
    86                                  
    87 0000003E 49FFC5                  	inc r13             ; increment count
    88 00000041 EBE0                    	jmp fill_loop
    89                                  
    90                                  fill_done:
    91 00000043 4C89E8                  	mov rax, r13        ; return number of elements in array
    92                                  	restore             ; This macro restores all general purpose registers.
    71 00000046 9D                  <1>  popf
    72 00000047 5B                  <1>  pop rbx
    73 00000048 415F                <1>  pop r15
    74 0000004A 415E                <1>  pop r14
    75 0000004C 415D                <1>  pop r13
    76 0000004E 415C                <1>  pop r12
    77 00000050 415B                <1>  pop r11
    78 00000052 415A                <1>  pop r10
    79 00000054 4159                <1>  pop r9
    80 00000056 4158                <1>  pop r8
    81 00000058 59                  <1>  pop rcx
    82 00000059 5A                  <1>  pop rdx
    83 0000005A 5E                  <1>  pop rsi
    84 0000005B 5F                  <1>  pop rdi
    85 0000005C 5D                  <1>  pop rbp
    93 0000005D C3                      	ret
