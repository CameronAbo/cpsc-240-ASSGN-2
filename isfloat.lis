     1                                  ;******************************************************************************************************************
     2                                  ;Copyright (C) 2020 Floyd Holliday                                                                                *
     3                                  ;                                                                                                                 *
     4                                  ;This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public*
     5                                  ;License version 3 as published by the Free Software Foundation.  This program is distributed in the hope that it *
     6                                  ;will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A  *
     7                                  ;PARTICULAR PURPOSE.  See the GNU General Public License for more details.  A copy of the GNU General Public      *
     8                                  ;License v3 is available here:  <https://www.gnu.org/licenses/>.                                                  *
     9                                  ;******************************************************************************************************************
    10                                  
    11                                  
    12                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2
    13                                  ;
    14                                  ;Author information
    15                                  ;  Author name: Cameron Abo
    16                                  ;  Author email: cabo0@csu.fullerton.edu
    17                                  ;
    18                                  ;Program information
    19                                  ;  Program name: gpr_backup.inc
    20                                  ;  Programming environment: Visual Studio Code, gcc 9.4.0, nasm
    21                                  ;  Programming languages:  X86
    22                                  ;  Date program began:     2025-Sep-21
    23                                  ;  Date program completed: 2025-Sep-21
    24                                  ;  Date comments upgraded: 2025-Sep-21
    25                                  ;  Files in this program: director.c, supervisor.asm, output_array.asm, input_array.c, director.c 
    26                                  ;  Status: Complete.  Alpha testing is finished.  Extreme cases were tested and errors resolved.
    27                                  ;
    28                                  ;References for this program
    29                                  ;  X86-64 Assembly Language Programming with Ubuntu
    30                                  ;
    31                                  ;Purpose (academic)
    32                                  ;  Backup and restore all general purpose registers and rflags.
    33                                  ;
    34                                  ;This file
    35                                  ;   File name: gpr_backup.inc
    36                                  ;   Language: i-series microprocessor assembly
    37                                  ;   Syntax: Intel
    38                                  ;   Max page width: 116 columns
    39                                  ;   Assemble: nasm -f elf64 -o super.o supervisor.asm -l super.lis
    40                                  ;   Link: gcc -m64 -no-pie -o arr.out -std=c17 director.o super.o input.o output.o 
    41                                  ;   Reference regarding -no-pie: Jorgensen, page 226.
    42                                  ;   Prototype of this function:  double manage_arrays();
    43                                  ;
    44                                  ;=======1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2
    45                                  ;
    46                                  ;
    47                                  ;
    48                                  ;
    49                                  ;===== Begin code area ================================================================================================
    50                                  
    51                                  ;Declarations
    52                                  %include "gpr_backup.inc"      ;<==This file contains macros that back up and restore the general purpose registers.
     1                              <1> ;******************************************************************************************************************
     2                              <1> ;Copyright (C) 2020 Floyd Holliday                                                                                *
     3                              <1> ;                                                                                                                 *
     4                              <1> ;This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public*
     5                              <1> ;License version 3 as published by the Free Software Foundation.  This program is distributed in the hope that it *
     6                              <1> ;will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A  *
     7                              <1> ;PARTICULAR PURPOSE.  See the GNU General Public License for more details.  A copy of the GNU General Public      *
     8                              <1> ;License v3 is available here:  <https://www.gnu.org/licenses/>.                                                  *
     9                              <1> ;******************************************************************************************************************
    10                              <1> 
    11                              <1> 
    12                              <1> ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2
    13                              <1> ;
    14                              <1> ;Author information
    15                              <1> ;  Author name: Cameron Abo
    16                              <1> ;  Author email: cabo0@csu.fullerton.edu
    17                              <1> ;
    18                              <1> ;Program information
    19                              <1> ;  Program name: gpr_backup.inc
    20                              <1> ;  Programming environment: Visual Studio Code, gcc 9.4.0, nasm
    21                              <1> ;  Programming languages:  X86
    22                              <1> ;  Date program began:     2025-Sep-21
    23                              <1> ;  Date program completed: 2025-Sep-21
    24                              <1> ;  Date comments upgraded: 2025-Sep-21
    25                              <1> ;  Files in this program: director.c, supervisor.asm, output_array.asm, input_array.c, director.c 
    26                              <1> ;  Status: Complete.  Alpha testing is finished.  Extreme cases were tested and errors resolved.
    27                              <1> ;
    28                              <1> ;References for this program
    29                              <1> ;  X86-64 Assembly Language Programming with Ubuntu
    30                              <1> ;
    31                              <1> ;Purpose (academic)
    32                              <1> ;  Backup and restore all general purpose registers and rflags.
    33                              <1> ;
    34                              <1> ;This file
    35                              <1> ;   File name: gpr_backup.inc
    36                              <1> ;   Language: i-series microprocessor assembly
    37                              <1> ;   Syntax: Intel
    38                              <1> ;   Max page width: 116 columns
    39                              <1> ;   Assemble: nasm -f elf64 -o super.o supervisor.asm -l super.lis
    40                              <1> ;   Link: gcc -m64 -no-pie -o arr.out -std=c17 director.o super.o input.o output.o 
    41                              <1> ;   Reference regarding -no-pie: Jorgensen, page 226.
    42                              <1> ;   Prototype of this function:  double manage_arrays();
    43                              <1> ;
    44                              <1> ;=======1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2
    45                              <1> ;
    46                              <1> ;
    47                              <1> ;
    48                              <1> ;
    49                              <1> ;===== Begin code area ================================================================================================
    50                              <1> 
    51                              <1> 
    52                              <1> %macro backup 0
    53                              <1>     push rbp                                          ;Backup rbp
    54                              <1>     mov  rbp,rsp                                      ;The base pointer now points to top of stack
    55                              <1>     push rdi                                          ;Backup rdi
    56                              <1>     push rsi                                          ;Backup rsi
    57                              <1>     push rdx                                          ;Backup rdx
    58                              <1>     push rcx                                          ;Backup rcx
    59                              <1>     push r8                                           ;Backup r8
    60                              <1>     push r9                                           ;Backup r9
    61                              <1>     push r10                                          ;Backup r10
    62                              <1>     push r11                                          ;Backup r11
    63                              <1>     push r12                                          ;Backup r12
    64                              <1>     push r13                                          ;Backup r13
    65                              <1>     push r14                                          ;Backup r14
    66                              <1>     push r15                                          ;Backup r15
    67                              <1>     push rbx                                          ;Backup rbx
    68                              <1>     pushf                                             ;Backup rflags
    69                              <1> %endmacro
    70                              <1> %macro restore 0
    71                              <1>     popf                                    ;Restore rflags
    72                              <1>     pop rbx                                 ;Restore rbx
    73                              <1>     pop r15                                 ;Restore r15
    74                              <1>     pop r14                                 ;Restore r14
    75                              <1>     pop r13                                 ;Restore r13
    76                              <1>     pop r12                                 ;Restore r12
    77                              <1>     pop r11                                 ;Restore r11
    78                              <1>     pop r10                                 ;Restore r10
    79                              <1>     pop r9                                  ;Restore r9
    80                              <1>     pop r8                                  ;Restore r8
    81                              <1>     pop rcx                                 ;Restore rcx
    82                              <1>     pop rdx                                 ;Restore rdx
    83                              <1>     pop rsi                                 ;Restore rsi
    84                              <1>     pop rdi                                 ;Restore rdi
    85                              <1>     pop rbp                                 ;Restore rbp
    86                              <1> %endmacro
    87                              <1> ;End of File
    53                                  newline equ 10
    54                                  null equ 0
    55                                  ;number_of_cells equ 5          ;<==To next open source developer: you may wish to change the size of the array
    56                                  
    57                                  extern printf
    58                                  extern isfloat
    59                                  extern fget
    60                                  extern atof
    61                                  extern input_array
    62                                  extern showlumber
    63                                  extern stdin
    64                                  
    65                                  global is_float
    66                                  
    67                                  segment .data
    68 00000000 546865206C61737420-     tryagainmessage db "The last input was invalid and not entered into the array.",newline,null
    68 00000009 696E70757420776173-
    68 00000012 20696E76616C696420-
    68 0000001B 616E64206E6F742065-
    68 00000024 6E746572656420696E-
    68 0000002D 746F20746865206172-
    68 00000036 7261792E0A00       
    69                                  
    70                                  
    71                                  segment .bss
    72 00000000 <res 200h>              buffer resb 512                     ; holds the string input of a floating point number
    73                                  
    74                                  
    75                                  segment .text
    76                                  is_float:
    77                                  backup    ;<==This macro backs up all general purpose registers.
    53 00000000 55                  <1>  push rbp
    54 00000001 4889E5              <1>  mov rbp,rsp
    55 00000004 57                  <1>  push rdi
    56 00000005 56                  <1>  push rsi
    57 00000006 52                  <1>  push rdx
    58 00000007 51                  <1>  push rcx
    59 00000008 4150                <1>  push r8
    60 0000000A 4151                <1>  push r9
    61 0000000C 4152                <1>  push r10
    62 0000000E 4153                <1>  push r11
    63 00000010 4154                <1>  push r12
    64 00000012 4155                <1>  push r13
    65 00000014 4156                <1>  push r14
    66 00000016 4157                <1>  push r15
    67 00000018 53                  <1>  push rbx
    68 00000019 9C                  <1>  pushf
    78                                  begin:
    79                                  ;--------------- Stores string input ------------------------------------------------------
    80 0000001A 4831C0                  xor rax, rax                        ; Clear rax
    81 0000001D 48BF-                   mov rdi, buffer                     ; Address of string
    81 0000001F [0000000000000000] 
    82 00000027 BEFF010000              mov rsi, 511                        ; Maximum number of characters to read
    83 0000002C 488B1425[00000000]      mov rdx, [stdin]                    ; File handle 0 is stdin
    84 00000034 E8(00000000)            call fget                           ; Call fget to read a string from stdin stored at address in rdi
    85                                  ;---------------------------------------------------------------------------------------------------
    86                                  
    87                                  ;--------------- Check for ctrl-d ----------------------------------------------------------
    88 00000039 4883F800                cmp rax, 0                          ; Did fget return 0 (ctrl-d)?
    89                                  ;--------------- Validate string as float ----------------------------------------------------------
    90 0000003D B800000000              mov rax, 0                          ; Clear rax
    91 00000042 48BF-                   mov rdi, buffer                     ; Address of string
    91 00000044 [0000000000000000] 
    92 0000004C E8(00000000)            call isfloat                        ; Call isfloat to validate the string as a float
    93                                  ; rax holds 0 if test fails, non-zero if test passes
    94 00000051 4883F800                cmp rax, 0                          ; Did the test fail?
    95 00000055 741F                    je failed                           ; Jump if test failed
    96                                  ;---------------------------------------------------------------------------------------------------
    97                                  
    98                                  ;--------------- handle valid input ----------------------------------------------------------
    99 00000057 B800000000              mov rax, 0
   100 0000005C 48BF-                   mov rdi, buffer
   100 0000005E [0000000000000000] 
   101 00000066 E8(00000000)            call atof                            ; Places converted float into rax
   102 0000006B 50                      push rax                             ; Push the float onto the stack
   103 0000006C 67F2440F103C24          movsd xmm15, [esp]                   ; Move the float from the stack into xmm15
   104 00000073 58                      pop rax                              ; Pop the stack
   105 00000074 EB16                    jmp continue                         ; Jump to continue
   106                                  ;---------------------------------------------------------------------------------------------------
   107                                  
   108                                  ;--------------- If test Failed ----------------------------------------------------------------
   109                                  failed:
   110 00000076 B800000000                  mov rax, 0
   111 0000007B 48BF-                       mov rdi, tryagainmessage
   111 0000007D [0000000000000000] 
   112 00000085 E8(00000000)                call printf
   113 0000008A EB8E                        jmp begin
   114                                  ;---------------------------------------------------------------------------------------------------
   115                                  
   116                                  continue:                           ; Continue here if input was valid
   117 0000008C F2410F10C7                  movsd xmm0, xmm15               ; move double result into xmm0
   118 00000091 B801000000                  mov rax, 1                      ; success status
   119 00000096 EB03                        jmp done                        ; Skip exit block
   120                                  
   121                                  exit:                               ;exit if ctrl-d was entered
   122 00000098 4831C0                      xor rax, rax                    ; rax = 0 indicates ctrl-d / EOF
   123                                  
   124                                  done:
   125                                      restore                         ;<==This macro restores all general purpose registers.
    71 0000009B 9D                  <1>  popf
    72 0000009C 5B                  <1>  pop rbx
    73 0000009D 415F                <1>  pop r15
    74 0000009F 415E                <1>  pop r14
    75 000000A1 415D                <1>  pop r13
    76 000000A3 415C                <1>  pop r12
    77 000000A5 415B                <1>  pop r11
    78 000000A7 415A                <1>  pop r10
    79 000000A9 4159                <1>  pop r9
    80 000000AB 4158                <1>  pop r8
    81 000000AD 59                  <1>  pop rcx
    82 000000AE 5A                  <1>  pop rdx
    83 000000AF 5E                  <1>  pop rsi
    84 000000B0 5F                  <1>  pop rdi
    85 000000B1 5D                  <1>  pop rbp
   126 000000B2 C3                          ret
